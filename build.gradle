buildscript {
	ext {
		kotlinVersion = '1.3.20'
		springBootVersion = '2.1.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
		classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
	}
}

plugins {
	id 'groovy'
}

apply plugin: 'kotlin'
apply plugin: 'kotlin-spring'
apply plugin: 'kotlin-jpa'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'pl.astronomy'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8
compileKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}
compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ["-Xjsr305=strict"]
		jvmTarget = "1.8"
	}
}

repositories {
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
}

ext['springCloudVersion'] = 'Greenwich.M3'

dependencies {
	implementation('org.springframework.boot:spring-boot-starter-actuator')
//	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb')
	implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
	implementation('org.springframework.boot:spring-boot-starter-security')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-webflux')
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-cli', version: '2.0.0.RELEASE'
	implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
	implementation('org.springframework.cloud:spring-cloud-starter-oauth2')
	implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
	implementation("org.jetbrains.kotlin:kotlin-reflect")
	implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.5.5'
//	implementation group: 'io.projectreactor.ipc', name: 'reactor-netty', version: '0.7.12.RELEASE'

	implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.7'
	implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.6'

	implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: springBootVersion

	testImplementation group: 'org.spockframework', name: 'spock-core', version: '1.2-groovy-2.5'
	testImplementation group: 'org.spockframework', name: 'spock-spring', version: '1.2-groovy-2.5'

	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation group: 'org.springframework', name: 'spring-test', version: '5.0.5.RELEASE'
	testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '2.2.0'
	testImplementation('io.projectreactor:reactor-test')
	testImplementation('org.springframework.security:spring-security-test')
	testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.6.0'
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

sourceSets {
	// So that we can place source code in 'src/integration/java':
	integration {
		groovy {
			// So that we can compile against the business classes (GreeterService, ...):
			compileClasspath += main.output
			// So that we can compile against the libs used by the business classes:
			compileClasspath += main.compileClasspath

			// So that we can compile against the unit test classes (custom utilities fx):
			compileClasspath += test.output
			// So that we can compile against the libs used by the unit test classes (JUnit, Spring test support, ...):
			compileClasspath += test.compileClasspath

			// So that test- and business classes can be used at runtime:
			runtimeClasspath += test.runtimeClasspath
		}
	}
}

task integrationTest(type: Test) {
	group = "verification"

	// So that Gradle knows where the integration test classes are:
	testClassesDirs = sourceSets.integration.output

	// So that Gradle knows which runtime class path to use:
	classpath = sourceSets.integration.runtimeClasspath
}

def dockerDir = "$projectDir/docker"
def dockerGroup = 'docker'

task dockerBackendStop(type: Exec) {
	workingDir "$dockerDir"
	inputs.dir "$dockerDir"

	group = "$dockerGroup"
	
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "$dockerDir/mongo-import/docker_compose_down.bat"
	} else {
		commandLine "$dockerDir/mongo-import/docker_compose_down.sh"
	}
}

task dockerBackendRun(type: Exec) {
	dependsOn "build"
	workingDir "$dockerDir"
	inputs.dir "$dockerDir"

	group = "$dockerGroup"

	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "$dockerDir/mongo-import/docker_compose_up.bat"
	} else {
		commandLine "$dockerDir/mongo-import/docker_compose_up.sh"
	}

	finalizedBy dockerBackendStop
}

def webappDir = "$projectDir/src/main/webapp"
def angularGroup = 'angular'
sourceSets {
	main {
		resources {
			srcDirs = ["$webappDir/dist", "$projectDir/src/main/resources"]
		}
	}
}

task angularBuildAndRun(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = "$angularGroup"

	dependsOn "angularBuild"
	dependsOn "angularRun"
}

task angularRun(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = "$angularGroup"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "serve"
    } else {
        commandLine "ng", "serve"
    }
}

task angularBuild(type: Exec) {
    // angularInstall should be run prior to this task
    dependsOn "angularInstall"
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = "$angularGroup"
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "build"
    } else {
        commandLine "ng", "build"
    }
}

task angularInstall(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = "$angularGroup"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "npm.cmd", "install"
    } else {
        commandLine "npm", "install"
    }
}

task angularUnitTests(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = "$angularGroup"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "test", "--code-coverage"
    } else {
        commandLine "ng", "test", "--code-coverage"
    }
}

task angularE2ETests(type: Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    group = "$angularGroup"
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "e2e"
    } else {
        commandLine "ng", "e2e"
    }
}

task runAngularAndBackend(type: Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = "$angularGroup"

	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}

	finalizedBy "bootRun"
}

bootRun {
	def encryptKeyFile = "$projectDir/src/main/resources/passwords/spring/encryption/key/encrypt_key.txt"
	def encryptKeyValue =  new File(encryptKeyFile).text.trim()
	
	systemProperty "encrypt.key", "$encryptKeyValue"
}
